##
## This workflow handles testing of pull requests and pushes.
## It also publishes some packages to any new Erlang/OTP release
##
## To speed this up it would be nice if one could share docker
## images inbetween different jobs, but at the moment this is
## not possible so we need to rebuild all of Erlang/OTP multiple
## times.
##
## Also once the windows runner supports WSL we should implement
## support for building Erlang/OTP here.
##
## When ghcr.io support using the GITHUB_TOKEN we should migrate
## over to use it instead as that should allow us to use the
## built-in caching mechanisms of docker/build-push-action@v2.
## However as things are now we use docker directly to make things
## work.
##

name: Build and check Erlang/OTP

on:
  push:
  pull_request:

jobs:

  pack:
    name: Pack the Erlang/OTP tar.gz
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Create initial pre-release tar 
        run: .github/scripts/init-pre-release.sh
      - name: Upload source tar archive
        uses: actions/upload-artifact@v2
        with:
          name: otp_git_archive
          path: otp_src.tar.gz



  build-s390x:
    name: Build Erlang/OTP on s390x
    runs-on: ubuntu-latest
    needs: pack
    
    steps:
      - uses: actions/checkout@v2
      - name: Build Erlang on s390x
        uses: uraimo/run-on-arch-action@master
        id: runcmd
        with:
          arch: s390x
          distro: ubuntu18.04
          shell: /bin/bash
          run: |
            ./scripts/build-otp
            ./otp_build tests
            ./scripts/run-smoke-tests

  ## If this is a tag that has been pushed we do some release work
  release:
    name: Release Erlang/OTP
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/') && github.repository == 'erlang/otp'
    steps:
      ## This step outputs the tag name and whether the tag is a release or patch
      ## (all releases have only two version identifiers, while patches have three
      ##  or more)
      - name: Get Tag Name
        id: tag
        run: |
          TAG=${GITHUB_REF#refs/tags/}
          IS_RELEASE=`$(echo $TAG | grep -E '^OTP-[0-9]+\.[0-9]+$' > /dev/null) \
            && echo "true" || echo "false"`
          echo "::set-output name=tag::${TAG}"
          echo "::set-output name=release::${IS_RELEASE}"
      
      - uses: actions/checkout@v2

      ## Publish the pre-built archive and docs
      - name: Download source archive
        uses: actions/download-artifact@v2
        with:
          name: otp_prebuilt
      - name: Download html docs
        uses: actions/download-artifact@v2
        with:
          name: otp_doc_html
      - name: Download man docs
        uses: actions/download-artifact@v2
        with:
          name: otp_doc_man

      ## We add the correct version name into the file names
      ## and create the hash files for all assets
      - name: Create pre-build and doc archives
        run: .github/scripts/create-artifacts.sh artifacts ${{ steps.tag.outputs.tag }}

      - name: Build OTP Bundle
        if: steps.tag.outputs.release == 'true'
        run: |
          scripts/bundle-otp ${{ steps.tag.outputs.tag }}

      ## Create hash files
      - name: Create pre-build and doc archives
        run: |
          shopt -s nullglob
          cd artifacts
          md5sum {*.tar.gz,*.txt} > MD5.txt
          sha256sum {*.tar.gz,*.txt} > SHA256.txt

      - name: Upload pre-built and doc tar archives
        uses: softprops/action-gh-release@v1
        with:
          name: OTP ${{ steps.tag.outputs.vsn }}
          files: |
            artifacts/*.tar.gz
            artifacts/*.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
